import { PrinterMode, PrinterStatus, SunmiBarcodeTextPos, SunmiBarcodeType, SunmiFontSize, SunmiPrintAlign, SunmiQrcodeLevel, SunmiStyle, ColumnMaker } from "./models";
export declare function ping(value: string): Promise<string | null>;
export declare function print(method: string, args: Record<string, unknown>): Promise<string | null>;
export declare class SunmiPrinter {
    private static readonly printerStatus;
    private static readonly paperSizes;
    static bindingPrinter(): Promise<boolean | null>;
    static unbindingPrinter(): Promise<boolean | null>;
    static initPrinter(): Promise<boolean | null>;
    static getPrinterStatus(): Promise<PrinterStatus>;
    static getPrinterStatusWithVerbose(): Promise<string | undefined>;
    static getPrinterMode(): Promise<PrinterMode>;
    static printText(text: string, style?: SunmiStyle): Promise<void>;
    static printRow(cols: ColumnMaker[], isArabic?: boolean): Promise<void>;
    static printRawData(data: Uint8Array): Promise<void>;
    static printQRCode(data: string, size?: number, errorLevel?: SunmiQrcodeLevel): Promise<void>;
    static printBarCode(data: string, barcodeType?: SunmiBarcodeType, height?: number, width?: number, textPosition?: SunmiBarcodeTextPos): Promise<void>;
    static lineWrap(lines: number): Promise<void>;
    static line(ch?: string, len?: number): Promise<void>;
    static bold(): Promise<void>;
    static resetBold(): Promise<void>;
    static setAlignment(alignment: SunmiPrintAlign): Promise<void>;
    static printImage(img: Uint8Array): Promise<void>;
    static startTransactionPrint(clear?: boolean): Promise<void>;
    static submitTransactionPrint(): Promise<void>;
    static cut(): Promise<void>;
    static openDrawer(): Promise<void>;
    static drawerStatus(): Promise<boolean>;
    static drawerTimesOpen(): Promise<number>;
    static exitTransactionPrint(clear?: boolean): Promise<void>;
    static setFontSize(size: SunmiFontSize): Promise<void>;
    static setCustomFontSize(size: number): Promise<void>;
    static resetFontSize(): Promise<void>;
    static paperSize(): Promise<number>;
    static serialNumber(): Promise<string>;
    static printerVersion(): Promise<string>;
    static startLabelPrint(): Promise<void>;
    static exitLabelPrint(): Promise<void>;
}
